import mlrose
import numpy as np
import matplotlib.pyplot as plt
import time
problem_name = "MaxKColor"
file = open(problem_name + ".txt", 'w')

def filewrite_array(title, array):
    file.write(title + "\n")
    file.write(' '.join(str(e) for e in array) + "\n")
    file.write('[' + ', '.join(str(e) for e in array) + "]\n")
    file.write("\n")

def plot(RHC, SA, GA, MM, time_RHC, time_SA, time_GA, time_MM, array, K):
    plt.plot(RHC, color='red', alpha=0.8, label='RHC')
    plt.plot(SA, color='blue', alpha=0.8, label='SA')
    plt.plot(GA, color='green', alpha=0.8, label='GA')
    plt.plot(MM, color='yellow', alpha=0.8, label='Mimic')
    
    plt.title("Fitness over Iterations (K = " + str(K) + ")", fontsize=14)
    plt.ylabel('Fitness')
    plt.xlabel('Iterations')
    plt.xticks(np.arange(len(array)), array)
    plt.legend(loc='best')
    dwn = plt.gcf()
    plt.savefig(problem_name + "_Fitness (K = " + str(K) + ")")
    plt.show()

    plt.plot(time_RHC, color='red', alpha=0.8, label='RHC')
    plt.plot(time_SA, color='blue', alpha=0.8, label='SA')
    plt.plot(time_GA, color='green', alpha=0.8, label='GA')
    plt.plot(time_MM, color='yellow', alpha=0.8, label='Mimic')
    
    plt.title("Time over Iterations (K = " + str(K) + ")", fontsize=14)
    plt.ylabel('Time')
    plt.xlabel('Iterations')
    plt.xticks(np.arange(len(array)), array)
    plt.legend(loc='best')
    dwn = plt.gcf()
    plt.savefig(problem_name + "_Time (K = " + str(K) + ")")
    plt.show()

def fit(K, length, fitness):
    problem = mlrose.DiscreteOpt(length = length, fitness_fn = fitness, maximize = False, max_val = K)

    iterations = [10,50,100,200,400,800,1600,3200]
    RHC, SA, GA, MM = ([],[],[],[])
    time_RHC, time_SA, time_GA, time_MM = ([],[],[],[])

    for iter in iterations:
        print ("max iterations = " + str(iter))
        start_time = time.time()
        best_fitness = 0
        for times in range(10):
            best_state, best_fitness = mlrose.random_hill_climb(problem, max_attempts = 10, max_iters = iter, restarts = 0, init_state = np.zeros((length,), dtype=np.int))
            best_fitness = min(best_fitness, best_fitness)
            #print(best_state)
        RHC.append(best_fitness)
        print(best_fitness)
        time_RHC.append((time.time() - start_time)/10)

        start_time = time.time()
        best_fitness = 0
        for times in range(10):
            best_state, best_fitness = mlrose.simulated_annealing(problem, schedule = mlrose.GeomDecay(), max_attempts = 10, max_iters = iter, init_state = np.zeros((length,), dtype=np.int))
            best_fitness = min(best_fitness, best_fitness)
            #print(best_state)
        SA.append(best_fitness)
        print(best_fitness)
        time_SA.append((time.time() - start_time)/10)

        start_time = time.time()
        best_fitness = 0
        best_state, best_fitness = mlrose.genetic_alg(problem, pop_size = 200, mutation_prob = 0.1, max_attempts = 10, max_iters = iter)
        #print(best_state)
        print(best_fitness)
        GA.append(best_fitness)
        time_GA.append((time.time() - start_time))

        start_time = time.time()
        best_fitness = 0
        best_state, best_fitness = mlrose.mimic(problem, pop_size = 200, keep_pct = 0.2, max_attempts = 10, max_iters = iter)
        #print(best_state)
        print(best_fitness)
        MM.append(best_fitness)
        time_MM.append((time.time() - start_time))
    
    plot(RHC, SA, GA, MM, time_RHC, time_SA, time_GA, time_MM, iterations, K)
    filewrite_array("iterations:", iterations)
    filewrite_array("Fitness(RHC):", RHC)
    filewrite_array("Fitness(SA):", SA)
    filewrite_array("Fitness(GA):", GA)
    filewrite_array("Fitness(MM):", MM)
    filewrite_array("Fitness(time_RHC):", time_RHC)
    filewrite_array("Fitness(time_SA):", time_SA)
    filewrite_array("Fitness(time_GA):", time_GA)
    filewrite_array("Fitness(time_MM):", time_MM)

#50 677
edges = [(0,4),(0,8),(0,13),(0,15),(0,18),(0,20),(0,21),(0,24),(0,25),(0,28),(0,32),(0,34),(0,41),(0,42),(0,43),(0,44),(0,46),(1,9),(1,10),(1,15),(1,23),(1,25),(1,28),(1,32),(1,35),(1,39),(1,43),(1,49),(2,2),(2,3),(2,4),(2,6),(2,7),(2,9),(2,10),(2,14),(2,18),(2,27),(2,29),(2,35),(2,37),(2,39),(2,43),(2,44),(3,0),(3,3),(3,11),(3,17),(3,23),(3,25),(3,32),(3,37),(3,41),(3,45),(4,8),(4,11),(4,14),(4,16),(4,20),(4,21),(4,23),(4,26),(4,27),(4,28),(4,29),(4,38),(4,39),(4,40),(4,44),(4,49),(5,2),(5,3),(5,4),(5,11),(5,20),(5,26),(5,41),(5,43),(5,44),(5,49),(6,0),(6,4),(6,6),(6,12),(6,21),(6,24),(6,31),(6,37),(6,48),(6,49),(7,5),(7,6),(7,7),(7,9),(7,12),(7,18),(7,20),(7,24),(7,26),(7,30),(7,31),(7,37),(7,38),(7,47),(8,1),(8,2),(8,5),(8,10),(8,15),(8,16),(8,25),(8,28),(8,32),(8,33),(8,34),(8,35),(8,39),(8,44),(8,47),(9,5),(9,8),(9,9),(9,21),(9,22),(9,33),(9,34),(9,35),(9,45),(9,47),(10,3),(10,6),(10,10),(10,11),(10,16),(10,26),(10,33),(10,41),(10,44),(10,45),(10,47),(10,48),(11,1),(11,7),(11,8),(11,11),(11,25),(11,30),(11,33),(11,36),(11,42),(11,49),(12,2),(12,4),(12,5),(12,9),(12,10),(12,12),(12,19),(12,20),(12,21),(12,24),(12,30),(12,38),(12,39),(12,48),(12,49),(13,3),(13,5),(13,6),(13,9),(13,13),(13,15),(13,16),(13,17),(13,21),(13,24),(13,25),(13,28),(13,30),(13,31),(13,41),(13,42),(13,44),(13,45),(13,47),(14,1),(14,5),(14,6),(14,7),(14,10),(14,11),(14,12),(14,14),(14,15),(14,16),(14,19),(14,21),(14,22),(14,27),(14,36),(14,38),(14,40),(14,41),(15,15),(15,21),(15,23),(15,24),(15,27),(15,30),(15,40),(16,1),(16,2),(16,9),(16,19),(16,20),(16,23),(16,24),(16,30),(16,34),(16,39),(16,42),(16,46),(17,11),(17,12),(17,14),(17,15),(17,17),(17,18),(17,21),(17,24),(17,27),(17,29),(17,30),(17,33),(17,34),(17,37),(17,39),(17,47),(17,48),(18,12),(18,16),(18,19),(18,22),(18,24),(18,32),(18,34),(18,38),(18,49),(19,1),(19,8),(19,9),(19,10),(19,19),(19,21),(19,22),(19,24),(19,26),(19,34),(19,35),(19,49),(20,1),(20,9),(20,10),(20,13),(20,14),(20,18),(20,29),(20,37),(20,40),(20,41),(20,44),(20,45),(21,3),(21,7),(21,8),(21,11),(21,21),(21,25),(21,27),(21,29),(21,31),(21,38),(21,40),(21,48),(22,2),(22,3),(22,4),(22,12),(22,15),(22,23),(22,24),(22,25),(22,28),(22,32),(22,37),(22,39),(22,41),(22,42),(23,2),(23,8),(23,11),(23,12),(23,14),(23,24),(23,30),(23,31),(23,33),(23,35),(23,36),(23,42),(23,46),(24,1),(24,2),(24,3),(24,9),(24,10),(24,11),(24,24),(24,26),(24,27),(24,28),(24,29),(24,33),(24,35),(24,42),(24,44),(24,46),(24,47),(25,2),(25,9),(25,25),(25,30),(25,32),(25,35),(25,37),(25,40),(25,41),(25,43),(25,45),(25,46),(25,47),(26,3),(26,8),(26,9),(26,15),(26,16),(26,20),(26,26),(26,28),(26,29),(26,30),(26,39),(26,42),(26,48),(26,49),(27,5),(27,6),(27,9),(27,10),(27,11),(27,12),(27,16),(27,18),(27,19),(27,20),(27,22),(27,27),(27,28),(27,30),(27,33),(27,34),(27,35),(27,38),(27,46),(28,2),(28,15),(28,17),(28,18),(28,19),(28,21),(28,23),(28,25),(28,36),(28,41),(28,42),(28,46),(29,5),(29,7),(29,8),(29,10),(29,12),(29,14),(29,16),(29,28),(29,30),(29,31),(29,32),(29,34),(29,45),(29,49),(30,0),(30,2),(30,3),(30,5),(30,8),(30,19),(30,20),(30,33),(30,35),(30,36),(30,39),(30,42),(30,45),(31,1),(31,3),(31,5),(31,10),(31,11),(31,12),(31,16),(31,17),(31,22),(31,25),(31,26),(31,30),(31,33),(31,34),(31,36),(31,38),(31,39),(31,40),(31,43),(31,44),(31,45),(32,5),(32,6),(32,12),(32,13),(32,16),(32,17),(32,21),(32,34),(32,41),(32,42),(32,44),(32,45),(32,47),(32,49),(33,6),(33,13),(33,14),(33,16),(33,22),(33,25),(33,29),(33,35),(33,41),(34,2),(34,4),(34,6),(34,7),(34,13),(34,20),(34,23),(34,26),(34,28),(34,30),(34,34),(34,35),(34,36),(34,38),(34,46),(34,49),(35,0),(35,3),(35,5),(35,11),(35,14),(35,15),(35,16),(35,20),(35,21),(35,26),(35,31),(35,39),(35,40),(35,45),(35,48),(36,1),(36,4),(36,6),(36,7),(36,8),(36,9),(36,24),(36,25),(36,26),(36,33),(36,35),(36,38),(36,40),(36,42),(37,5),(37,18),(37,28),(37,29),(37,30),(37,33),(37,40),(37,41),(37,44),(37,47),(37,48),(38,3),(38,5),(38,9),(38,16),(38,22),(38,29),(38,32),(38,35),(38,39),(38,40),(38,43),(38,46),(39,7),(39,9),(39,14),(39,19),(39,25),(39,27),(39,34),(39,36),(39,48),(40,5),(40,7),(40,9),(40,10),(40,11),(40,12),(40,13),(40,16),(40,23),(40,33),(40,43),(40,46),(40,49),(41,1),(41,6),(41,9),(41,16),(41,17),(41,19),(41,21),(41,26),(41,30),(41,34),(41,39),(41,40),(41,47),(42,1),(42,9),(42,10),(42,15),(42,17),(42,19),(42,20),(42,21),(42,27),(42,31),(42,34),(42,37),(42,38),(42,39),(42,41),(42,45),(42,46),(42,47),(43,7),(43,12),(43,15),(43,16),(43,19),(43,22),(43,23),(43,24),(43,26),(43,27),(43,28),(43,32),(43,33),(43,35),(43,39),(43,41),(43,46),(43,47),(44,1),(44,3),(44,6),(44,14),(44,16),(44,17),(44,18),(44,23),(44,27),(44,29),(44,30),(44,33),(44,34),(44,39),(44,44),(44,45),(44,47),(44,48),(45,1),(45,5),(45,7),(45,8),(45,21),(45,27),(45,34),(45,39),(45,41),(45,43),(45,46),(45,48),(46,2),(46,4),(46,6),(46,7),(46,8),(46,11),(46,15),(46,17),(46,22),(46,29),(46,30),(46,31),(46,36),(47,0),(47,3),(47,4),(47,5),(47,6),(47,14),(47,19),(47,20),(47,26),(47,28),(47,33),(47,34),(47,36),(47,48),(48,1),(48,2),(48,3),(48,13),(48,14),(48,15),(48,16),(48,19),(48,23),(48,25),(48,27),(48,30),(48,32),(48,40),(49,3),(49,10),(49,15),(49,17),(49,27),(49,35),(49,38),(49,43),(49,46),(49,47)]
length = 50
fitness = mlrose.MaxKColor(edges)
# state = np.array([0, 1, 0, 1, 1])
# fitness.evaluate(state)
for K in range(2, 5):
    print("K: " + str(K))
    file.write("K: " + str(K) + '\n')
    fit(K, length, fitness)
    
file.close()